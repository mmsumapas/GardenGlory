// <auto-generated />
using System;
using GardenGlory.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GardenGlory.Migrations
{
    [DbContext(typeof(GardenGloryContext))]
    [Migration("20200317150236_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GardenGlory.EfClasses.AccessRestriction", b =>
                {
                    b.Property<string>("RestrictionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestrictionId");

                    b.ToTable("AccessRestriction");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExperienceLevelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TotalHourrsWorked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("ExperienceLevelId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.EmployeeStatus", b =>
                {
                    b.Property<string>("EmployeeStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeStatusId");

                    b.ToTable("EmployeeStatus");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.EmployeeType", b =>
                {
                    b.Property<string>("EmployeeTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeType");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Equipment", b =>
                {
                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.EquipmentRepair", b =>
                {
                    b.Property<string>("EquipmentRepairId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateOfRepair")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentRepairId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentRepair");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.EquipmentUsage", b =>
                {
                    b.Property<string>("EquipmentUsageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentUsageId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("EquipmentUsage");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.ExperienceLevel", b =>
                {
                    b.Property<string>("ExperienceLevelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceLevelId");

                    b.ToTable("ExperienceLevel");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Owner", b =>
                {
                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OwnerId");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.OwnerType", b =>
                {
                    b.Property<string>("OwnerTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerTypeId");

                    b.ToTable("OwnerType");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.PaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentPropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentPropertyId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.PropertyDescription", b =>
                {
                    b.Property<string>("PropertyDescriptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PropertyDescriptionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyDescription");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RestrictionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.ServiceType", b =>
                {
                    b.Property<string>("ServiceTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateConducted")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("HoursWorked")
                        .HasColumnType("float");

                    b.Property<string>("ServiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("GardenGlory.TrainedEmployee", b =>
                {
                    b.Property<string>("TrainedEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EquipmentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TrainedEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("TrainedEmployee");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Account", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Employee", "EmployeeLink")
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("GardenGlory.EfClasses.Role", "RoleLink")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Employee", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.EmployeeStatus", "EmployeeStatusLink")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId");

                    b.HasOne("GardenGlory.EfClasses.EmployeeType", "EmployeeTypeLink")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("GardenGlory.EfClasses.ExperienceLevel", "ExperienceLevelLink")
                        .WithMany("Employees")
                        .HasForeignKey("ExperienceLevelId");

                    b.HasOne("GardenGlory.EfClasses.Employee", "EmployeeLink")
                        .WithMany("Employees")
                        .HasForeignKey("SupervisorId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.EquipmentRepair", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Equipment", "EquipmentLink")
                        .WithMany("EquipmentRepairs")
                        .HasForeignKey("EquipmentId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.EquipmentUsage", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Equipment", "EquipmentLink")
                        .WithMany("EquipmentUsages")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("GardenGlory.EfClasses.Task", "TaskLink")
                        .WithMany("EquipmentUsages")
                        .HasForeignKey("TaskId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Owner", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.OwnerType", "OwnerTypeLink")
                        .WithMany("Owners")
                        .HasForeignKey("OwnerTypeId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Payment", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.PaymentMethod", "PaymentMethodLink")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("GardenGlory.EfClasses.Service", "ServiceLink")
                        .WithMany("Payments")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Property", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Owner", "OwnerLink")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId");

                    b.HasOne("GardenGlory.EfClasses.Property", "PropertyLink")
                        .WithMany("Properties")
                        .HasForeignKey("ParentPropertyId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.PropertyDescription", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Property", "PropertyLink")
                        .WithMany("PropertyDescriptions")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Role", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.AccessRestriction", "AccessRestrictionLink")
                        .WithMany("Roles")
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Service", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Property", "PropertyLink")
                        .WithMany("Services")
                        .HasForeignKey("PropertyId");

                    b.HasOne("GardenGlory.EfClasses.ServiceType", "ServiceTypeLink")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId");
                });

            modelBuilder.Entity("GardenGlory.EfClasses.Task", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Employee", "EmployeeLink")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("GardenGlory.EfClasses.Service", "ServiceLink")
                        .WithMany("Tasks")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("GardenGlory.TrainedEmployee", b =>
                {
                    b.HasOne("GardenGlory.EfClasses.Employee", "EmployeeLink")
                        .WithMany("TrainedEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("GardenGlory.EfClasses.Equipment", "EquipmentLink")
                        .WithMany("TrainedEmployees")
                        .HasForeignKey("EquipmentId");
                });
#pragma warning restore 612, 618
        }
    }
}
